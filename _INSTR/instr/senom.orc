
maxalloc	"senom_instr", nchnls

indx init 0
until indx == nchnls do
    schedule nstrnum("senom_instr")+(indx+1)/10, 0, -1, indx+1
    indx += 1
od

gksenom_cps		init	0       ;INITIALISE GLOBAL VARIABLES
gksenom_port    init .05

    instr senom	;NOTE ON/OFF AND PITCH REGISERING INSTRUMENT. THIS INSTRUMENT WILL BE TRIGGERED BY NOTE PLAYED ON THE MIDI KEYBOARD
    $params(senom_instr)
gksenom_cps	    init	icps		        ;CREATE A K-RATE GLOBAL VARIABLE VERSION OF MIDI PITCH THAT WILL BE USED IN INSTRUMENT 2.
gksenom_noteon	init	1	                ;A FLAG TO INDICATE WHEN A NEW NOTE HAS BEEN PLAYED. THIS FLAG IS CLEARED (RESET TO ZERO) AT THE BOTTOM OF INSTR 2.

gksenom_dyn     init idyn
        turnoff
    endin

    instr	senom_instr	;SOUND PRODUCING INSTRUMENT

Sinstr		init "senom"
/* idur		init p3
idyn		init p4
ienv		init p5
icps		init p6 */
ich         init p4
print ich

;VIBRATO ENVELOPE CHARACTERISTICS 
ivibamp		init	0.05
ivibdelayTim	init	0.3
ivibRiseTim	init	1.2
kvibfreq	init	6

;AMPLITUDE ENVELOPE CHARACTERISTICS
iAmpAttTim	init	0.01
iAmpRelTim	init	1

;RESONANT LOWPASS FILTER ENVELOPE CHARACTERISTICS (ADSR TYPE)
iFiltAttTim	init	0.01			;FILTER ENVELOPE ATTACK TIME
iFiltAttLev	init	1			;ATTACK LEVEL FOR THE FILTER ENVELOPE (RANGE 0 - 1)
iFiltDecTim	init	2			;FILTER ENVELOPE DECAY TIME 
iFiltRelTim	init	1			;FILTER ENVELOPE RELEASE TIME 
iFiltSusLev	init	0.7			;SUSTAIN LEVEL FOR THE FILTER ENVELOPE (RANGE 0 - 1)
iFiltBase	init	4			;BASIC FILTER CUTOFF OFFSET IN OCT FORMAT. ENVELOPE WILL BE ADDED TO THIS VALUE.
iFiltEnvRange	init	10			;RANGE OF THE ENVELOPE'S INFLUENCE IN OCT FORMAT
kres		init	0.65			;FILTER RESONANCE

kactive1	active	1						;CONTINUALLY TRACK THE NUMBER OF ACTIVE INSTANCES OF INSTRUMENT 1. I.E. THE NUMBER OF MIDI NOTES HELD.

;CREATE PORTAMENTO ON PITCH PARAMETER
kporttime	linseg	0,0.01,1					;PORTAMENTO TIME RISES QUICKLY TO A HELD VALUE OF '1'
kporttime	=	kporttime*gksenom_port				;PORTAMENTO TIME FUNCTION SCALED BY VALUE OUTPUT BY FLTK SLIDER
kcps		portk	gksenom_cps, kporttime				;APPLY PORTAMENTO TO PITCH CHANGES

;SENSE WHEN TO RE-TRIGGER THE VIBRATO ENVELOPE...
if	gksenom_noteon=1 then							;IF A NEW NOTE HAS BEGUN...
    reinit	RestartVibEnv						;RESTART THE VIBRATO ENVELOPE FROM LABEL 'RestartVibEnv'
endif									;END OF THIS CONDITIONAL BRANCH
;CREATE A VIBRATO FUNCTION - THIS ENVELOPE WILL BE TRIGGERED WITH EACH NEW NEW THAT IS PRESSED WHETHER LEGATO OR NOT
RestartVibEnv:								;REINITIALISE FROM HERE IF A NEW NOTE HAS BEGUN - THIS WILL RESTART THE VIBRATO ENVELOPE
kvibenv		transeg	0,ivibdelayTim,0,0,ivibRiseTim,2,ivibamp	;SLIGHTLY CONCAVE BUILD-UP (shape=2)
idyn i gksenom_dyn
rireturn								;RETURN FROM REINITIALISATION PASS
kvib		oscil	kvibenv, kvibfreq, gisine			;CREATE VIBRATO FUNCTION
kvib		=	kvib+1						;SHIFT VIBRATO FUNCTION UP THE Y-AXIS SO THAT IT OSCILLATES ABOUT 1

;CREATE A SAWTOOTH OSCILLATOR USING THE vco2 OPCODE
asig		vco2	0.3,kcps*kvib

kAmpEnv		init	0						;INITIAL ENVELOPE STATE
kFiltEnv	init	0						;INITIAL ENVELOPE STATE
if gksenom_noteon=1&&kactive1=1 then						;IF A NEW LEGATO PHRASE IS BEGUN (I.E. A NEW NOTE HAS BEEN PRESSED AND NO OTHER PREVIOUS NOTES ARE BEING HELD)...
reinit	RestartLegEnvs						;RESTART THE 'LEGATO PHRASE' ENVELOPES (IN THIS CASE AMPLITUDE AND FILTER)
endif									;END OF THIS CONDITIONAL BRANCH
RestartLegEnvs:								;A LABEL: BEGIN A REINITIALISATION PASS FROM HERE TO RESTART THE LEGATO PHRASE ENVELOPES

if	kactive1>0 then							;IF A NEW LEGATO PHRASE IS BEGINNING...
kAmpEnv	transeg	i(kAmpEnv),iAmpAttTim,-2,1			;MOVE THROUGH AMPLITUDE ATTACK (NOTE ON) ENVELOPE. IT WILL HOLD THE FINAL VALUE
kAmpSus		=	kAmpEnv					;REGISTER OF THE FINAL VALUE OF THE ATTACK-SUSTAIN ENVELOPE - USED BY THE RELEASE STAGE OF THE ENVELOPE
kFiltEnv	transeg	i(kFiltEnv),iFiltAttTim,-2,iFiltAttLev,iFiltDecTim,-2,iFiltSusLev;MOVE THROUGH FILTER ATTACK (NOTE ON) ENVELOPE. IT WILL HOLD THE FINAL VALUE
kFiltSus		=	kFiltEnv				;REGISTER OF THE FINAL VALUE OF THE ATTACK-SUSTAIN ENVELOPE - USED BY THE RELEASE STAGE OF THE ENVELOPE
elseif	kactive1=0 then							;OR IF A LEGATO PHRASE HAS FINISHED (NO NOTE ARE BEGIN HELD)...
kAmpEnv	transeg	idyn,iAmpRelTim,-2,0                     		;MOVE THROUGH AMPLITUDE RELEASE ENVELOPE (FINAL VALUE WILL BE HELD)
kAmpEnv	=	kAmpEnv*kAmpSus					;RELEASE ENVELOPE RESCALED ACCORDING TO THE FINAL VALUE OF THE ATTACK SUSTAIN PORTION OF THE ENVELOPE BEFORE THE NOTE OFF WAS RECEIVED
kFiltEnv	transeg	iFiltSusLev,iFiltRelTim,-2,0			;MOVE THROUGH FILTER RELEASE ENVELOPE (FINAL VALUE WILL BE HELD)
kFiltEnv	=	kFiltEnv*kFiltSus				;RELEASE ENVELOPE RESCALED ACCORDING TO THE FINAL VALUE OF THE ATTACK SUSTAIN PORTION OF THE ENVELOPE BEFORE THE NOTE OFF WAS RECEIVED
endif									;END OF THIS CONDITIONAL BRANCH
rireturn								;RETURN FROM REINITIALISATION PASS

aAmpEnv		    interp	kAmpEnv						;SMOOTHER A-RATE AMPLITUDE ENVELOPE - MAY PROVE BENEFICIAL IF THERE ARE FAST CHANGING ENVELOPE SEGMENTS 
kFiltEnvScl	=	cpsoct((kFiltEnv*iFiltEnvRange)+iFiltBase)	;FILTER ENVELOPE RESCALED AND CONVERTED FROM OCT FORMAT TO CPS

;CREATE A FILTERED VERSION OF THE OSCILLATOR SIGNAL
asig		moogladder	asig,kFiltEnvScl,kres			;MOOG LOWPASS FILTER SIGNAL
aout = asig*aAmpEnv					;SEND AUDIO TO OUTPUT

gksenom_noteon	=	0						;CLEAR NOTE ON FLAG
            $channel_mix
            endin
